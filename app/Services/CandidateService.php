<?php

namespace App\Services;

use App\Jobs\SendEmailForArrivalStatusCandidates;
use App\Models\Candidate;
use App\Models\Category;
use App\Models\File;
use App\Models\Position;
use App\Models\Statushistory;
use Carbon\Carbon;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CandidateService
{
    public function createCandidate($data): Candidate
    {
        return DB::transaction(function () use ($data) {
            $candidate = new Candidate();
            $data['user_id'] = is_numeric($data['user_id']) ? (int) $data['user_id'] : null;
            $candidate->fill($data);

            $candidate->addedBy = Auth::id();
            $statusId = $data['status_id'] ?? 16; // Default to 'New' status if not provided


            // Calculate derived fields

            $candidate->quartal = $candidate->calculateQuartal(Carbon::parse($data['date']));

            if ($data['contractType'] === Candidate::CONTRACT_TYPE_90_DAYS) {
                $candidate->seasonal = $candidate->calculateSeason(Carbon::parse($data['date']));
            }

            if (isset($data['contractPeriod'])) {
                $candidate->contractPeriodDate = $candidate->calculateContractEndDate(
                    Carbon::parse($data['date']),
                    $data['contractPeriod']
                );
            }

            $candidate->save();

            $statusHistory = [
                'candidate_id' => $candidate->id,
                'status_id' => $statusId,
                'statusDate' => Carbon::now()->toDateString(),
                'description' => 'Candidate created',
            ];

            $candidate->statusHistories()->create($statusHistory);
            dispatch(new SendEmailForArrivalStatusCandidates($statusId, $candidate->id, Carbon::now()->toDateString()));

            // Handle file uploads
            $this->handleFileUploads($candidate, $data);

            // Create position document if exists
            $this->createPositionDocument($candidate, $data['position_id']);

            // Create default category

            $this->createDefaultCategory($candidate);

            return $candidate;
        });
    }

    public function updateCandidate(Candidate $candidate, $data): Candidate
    {
        return DB::transaction(function () use ($candidate, $data) {
            // Clean up auto-generated files
            $this->cleanupAutoGeneratedFiles($candidate);

            $candidate->fill($data);

            // Status history update
            if (isset($data['status_id']) && $data['status_id'] !== $candidate->latestStatusHistory->status->id) {
                $statusHistory = new Statushistory();
                $statusHistory->candidate_id = $candidate->id;
                $statusHistory->status_id = $data['status_id'] ?? $candidate->latestStatusHistory->status->id ?? 16; // Default to 'New' status if not provided
                $statusHistory->statusDate = Carbon::now()->toDateString();
                $statusHistory->description = 'Candidate updated';
                $statusHistory->save();
            }

            Log::info("Updating candidate with ID: {$candidate->id} and status ID:", [$data['status_id'] ?? 'N/A']);
            // Recalculate derived fields
            $candidate->quartal = $candidate->calculateQuartal(Carbon::parse($data['date']));

            if ($data['contractType'] === Candidate::CONTRACT_TYPE_90_DAYS) {
                $candidate->seasonal = $candidate->calculateSeason(Carbon::parse($data['date']));
                Log::info("Candidate seasonal status updated to: {$candidate->seasonal}");
            } else {
                $candidate->seasonal = null;
            }

            if (isset($data['contractPeriod'])) {
                $candidate->contractPeriodDate = $candidate->calculateContractEndDate(
                    Carbon::parse($data['date']),
                    $data['contractPeriod']
                );
            }

            $candidate->save();

            // Handle file uploads
            $this->handleFileUploads($candidate, $data);

            return $candidate->load('position');
        });
    }

    public function extendCandidateContract(Candidate $originalCandidate, array $data): Candidate
    {
        return DB::transaction(function () use ($originalCandidate, $data) {
            $newCandidate = $originalCandidate->replicate();
            $newCandidate->contractPeriodNumber = ($originalCandidate->contractPeriodNumber ?? 0) + 1;
            $newCandidate->fill($data);

            // Calculate derived fields
            $newCandidate->quartal = $newCandidate->calculateQuartal(Carbon::parse($data['date']));

            if ($data['contractType'] === Candidate::CONTRACT_TYPE_90_DAYS) {
                $newCandidate->seasonal = $newCandidate->calculateSeason(Carbon::parse($data['date']));
            }

            if (isset($data['contractPeriod'])) {
                $newCandidate->contractPeriodDate = $newCandidate->calculateContractEndDate(
                    Carbon::parse($data['date']),
                    $data['contractPeriod']
                );
            }

            $newCandidate->save();

            // Handle file uploads
            $this->handleFileUploads($newCandidate, $data);

            return $newCandidate->load('position');
        });
    }

    public function promoteToEmployee(Candidate $candidate): bool
    {
        $candidate->promoteToEmployee();
        return true;
    }

    public function deleteCandidate(Candidate $candidate): bool
    {
        return DB::transaction(function () use ($candidate) {
            // Delete associated files
            $files = File::where('candidate_id', $candidate->id)->get();

            foreach ($files as $file) {
                if ($file->filePath && Storage::disk('public')->exists($file->filePath)) {
                    Storage::disk('public')->delete($file->filePath);
                }
                $file->delete();
            }

            // Delete categories
            Category::where('candidate_id', $candidate->id)->delete();

            return $candidate->delete();
        });
    }

    public function updateSeasonalForAllCandidates(): int
    {
        $candidates = Candidate::seasonalContracts()->get();
        $updated = 0;

        foreach ($candidates as $candidate) {
            if ($candidate->date) {
                $candidate->seasonal = $candidate->calculateSeason($candidate->date);
                $candidate->save();
                $updated++;
            }
        }

        return $updated;
    }

    public function updateQuartalForAllCandidates(): int
    {
        $candidates = Candidate::all();
        $updated = 0;

        foreach ($candidates as $candidate) {
            if ($candidate->date) {
                $candidate->quartal = $candidate->calculateQuartal($candidate->date);
                $candidate->save();
                $updated++;
            }
        }

        return $updated;
    }

    public function updateAddedByForAllCandidates(): int
    {
        $candidates = Candidate::whereNull('addedBy')->get();
        $updated = 0;

        foreach ($candidates as $candidate) {
            $candidate->addedBy = $candidate->user_id ?? 11; // Default admin user
            $candidate->save();
            $updated++;
        }

        return $updated;
    }

    public function getExpiringContracts(int $monthsAhead = 4): \Illuminate\Database\Eloquent\Builder
    {
        $futureDate = Carbon::now()->addMonths($monthsAhead);

        return Candidate::with(['company:id,nameOfCompany,EIK', 'status:id,nameOfStatus', 'position:id,jobPosition'])
            ->contractExpiring($futureDate)
            ->orderBy('endContractDate', 'asc');
    }

    public function getFirstQuartal(): ?string
    {
        $candidate = Candidate::whereNotNull('quartal')
            ->orderByRaw('CAST(SUBSTRING_INDEX(quartal, "/", -1) AS UNSIGNED)')
            ->orderByRaw('CAST(SUBSTRING_INDEX(quartal, "/", 1) AS UNSIGNED)')
            ->first();

        return $candidate?->quartal;
    }

    protected function handleFileUploads(Candidate $candidate, array $data): void
    {
        if (isset($data['personPassport']) && $data['personPassport'] instanceof UploadedFile) {
            $passportPath = $data['personPassport']->store('personPassports', 'public');
            $candidate->update([
                'passportPath' => $passportPath,
                'passportName' => $data['personPassport']->getClientOriginalName()
            ]);
        }

        if (isset($data['personPicture']) && $data['personPicture'] instanceof UploadedFile) {
            $picturePath = $data['personPicture']->store('personImages', 'public');
            $candidate->update([
                'personPicturePath' => $picturePath,
                'personPictureName' => $data['personPicture']->getClientOriginalName()
            ]);
        }
    }

    protected function createPositionDocument(Candidate $candidate, int $positionId): void
    {
        return;
//        $position = Position::find($positionId);
//        Log::info("Creating position document for candidate ID: {$candidate->id} with position ID: {$positionId}", [$position]);
//        if(!$position->positionPath) {
//            Log::info("Position document path is empty for position ID: {$positionId}");
//            return;
//        }
//        if ($position && $position->positionPath) {
//            File::create([
//                'candidate_id' => $candidate->id,
//                'category_id' => 8,
//                'fileName' => $position->positionName ?? 'Position Document',
//                'filePath' => $position->positionPath,
//                'autoGenerated' => 1,
//                'deleteFile' => 2,
//            ]);
//        }
    }

    protected function createDefaultCategory(Candidate $candidate): void
    {
        Category::create([
            'candidate_id' => $candidate->id,
            'nameOfCategory' => 'Documents For Arrival Candidates',
            'role_id' => 2,
            'isGenerated' => 0,
        ]);
    }

    protected function cleanupAutoGeneratedFiles(Candidate $candidate): void
    {
        $files = File::where('candidate_id', $candidate->id)
            ->where('autoGenerated', 1)
            ->where('deleteFile', 0)
            ->get();

        foreach ($files as $file) {
            if ($file->filePath && Storage::disk('public')->exists($file->filePath)) {
                Storage::disk('public')->delete($file->filePath);
            }
            $file->delete();
        }
    }
}
