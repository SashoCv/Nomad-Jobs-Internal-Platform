<?php

namespace App\Http\Controllers;

use App\Models\Candidate;
use App\Models\Category;
use App\Models\File;
use App\Models\Position;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;

class CandidateController extends Controller
{

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        if (Auth::user()->role_id == 1 || Auth::user()->role_id == 2) {
            $query = Candidate::with(['company', 'status', 'position'])->orderBy('id', 'desc');
        } else if (Auth::user()->role_id == 3) {
            $query = Candidate::where('company_id', '=', Auth::user()->company_id)
                ->where('type_id', '=', 1)->orderBy('id', 'desc');
        } else {
            return response()->json([
                'success' => false,
                'status' => 401,
                'data' => []
            ]);
        }
        $candidates = $query->paginate(25);

        return response()->json([
            'success' => true,
            'status' => 200,
            'data' => $candidates,
        ]);
    }


   public function employees()
    {
        if (Auth::user()->role_id == 1 || Auth::user()->role_id == 2) {
            $query = Candidate::with(['company', 'status', 'position'])->where('type_id', '=', 2)->orderBy('id', 'desc');
        } else if (Auth::user()->role_id == 3) {
            $query = Candidate::where('company_id', '=', Auth::user()->company_id)
                ->where('type_id', '=', 2);
        } else {
            return response()->json([
                'success' => false,
                'status' => 401,
                'data' => []
            ]);
        }
        $employees = $query->paginate(25);

        return response()->json([
            'success' => true,
            'status' => 200,
            'data' => $employees,
        ]);
    }

    public function store(Request $request)
    {
        if (!in_array(Auth::user()->role_id, [1, 2])) {
            return response()->json([
                'success' => false,
                'status' => 401,
                'data' => [],
            ]);
        }

        $person = new Candidate();
        $person->fill($request->only([
            'status_id', 'type_id', 'company_id', 'gender', 'email', 'nationality', 'date', 'phoneNumber',
            'address', 'passport', 'fullName', 'fullNameCyrillic', 'birthday', 'placeOfBirth', 'country',
            'area', 'areaOfResidence', 'addressOfResidence', 'periodOfResidence', 'passportValidUntil',
            'passportIssuedBy', 'passportIssuedOn', 'addressOfWork', 'nameOfFacility', 'education',
            'specialty', 'qualification', 'contractExtensionPeriod', 'salary', 'workingTime', 'workingDays',
            'martialStatus', 'contractPeriod', 'contractType', 'position_id', 'dossierNumber', 'notes',
            'user_id', 'case_id', 'agent_id'
        ]));

        $person->addedBy = Auth::user()->id;

        // Compute fields
        $person->contractPeriodDate = $this->computeContractPeriodDate($request->date, $request->contractPeriod);
        [$quartalyYear, $quartalyMonth] = $this->extractYearMonth($request->date);
        $person->quartal = $this->computeQuartal($quartalyYear, $quartalyMonth);
        $person->seasonal = $this->computeSeasonal($request->contractType, $quartalyYear, $quartalyMonth);

        // Handle files
        if ($request->hasFile('personPassport')) {
            [$person->passportPath, $person->passportName] = $this->handleFileUpload($request->file('personPassport'), 'personPassports');
        }

        if ($request->hasFile('personPicture')) {
            [$person->personPicturePath, $person->personPictureName] = $this->handleFileUpload($request->file('personPicture'), 'companyImages');
        }

        if ($person->save()) {
            // If there's a job position document:
            $jobPositionDocument = Position::find($request->position_id);
            if ($jobPositionDocument && $jobPositionDocument->positionPath !== null) {
                File::create([
                    'candidate_id' => $person->id,
                    'category_id' => 8,
                    'fileName' => $jobPositionDocument->positionName,
                    'filePath' => $jobPositionDocument->positionPath,
                    'autoGenerated' => 1,
                    'deleteFile' => 2
                ]);
            }

            Category::create([
                'candidate_id' => $person->id,
                'nameOfCategory' => "Documents For Arrival Candidates",
                'role_id' => 2,
                'isGenerated' => 0,
            ]);

            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $person,
            ]);
        }

        return response()->json([
            'success' => false,
            'status' => 500,
            'data' => [],
        ]);
    }

    public function update(Request $request, $id)
    {
        if (!in_array(Auth::user()->role_id, [1, 2])) {
            return response()->json([
                'success' => false,
                'status' => 401,
                'data' => [],
            ]);
        }

        // Remove old autoGenerated=1 and deleteFile=0 files
        $files = File::where('candidate_id', $id)->where('autoGenerated', 1)->where('deleteFile', '0')->get();
        foreach ($files as $file) {
            if (Storage::disk('public')->exists($file->filePath)) {
                Storage::disk('public')->delete($file->filePath);
            }
            $file->delete();
        }

        $person = Candidate::findOrFail($id);

        $requestData = $request->only([
            'status_id', 'company_id', 'gender', 'email', 'nationality', 'date', 'phoneNumber',
            'address', 'passport', 'fullName', 'fullNameCyrillic', 'birthday', 'placeOfBirth', 'country',
            'area', 'areaOfResidence', 'addressOfResidence', 'periodOfResidence', 'passportValidUntil',
            'passportIssuedBy', 'passportIssuedOn', 'addressOfWork', 'nameOfFacility', 'education',
            'specialty', 'qualification', 'contractExtensionPeriod', 'salary', 'workingTime', 'workingDays',
            'martialStatus', 'contractPeriod', 'contractType', 'position_id', 'dossierNumber', 'notes',
            'user_id', 'case_id', 'agent_id'
        ]);

        // Force type_id to 1 as per original logic
        $requestData['type_id'] = 1;
        $person->fill($requestData);

        [$quartalyYear, $quartalyMonth] = $this->extractYearMonth($request->date);
        $person->quartal = $quartalyMonth . "/" . $quartalyYear;
        $person->contractPeriodDate = $this->computeContractPeriodDate($request->date, $request->contractPeriod);
        $person->seasonal = $this->computeSeasonal($request->contractType, $quartalyYear, $quartalyMonth);

        // Handle file uploads
        if ($request->hasFile('personPassport')) {
            [$person->passportPath, $person->passportName] = $this->handleFileUpload($request->file('personPassport'), 'personPassports');
        }

        if ($request->hasFile('personPicture')) {
            [$person->personPicturePath, $person->personPictureName] = $this->handleFileUpload($request->file('personPicture'), 'companyImages');
        }

        if ($person->save()) {
            $newPerson = Candidate::with('position')->find($id);
            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $newPerson,
            ]);
        }

        return response()->json([
            'success' => false,
            'status' => 500,
            'data' => [],
        ]);
    }

    /**
     * Extract year and month from a given date string
     */
    private function extractYearMonth($dateString): array
    {
        $year = date('Y', strtotime($dateString));
        $month = date('m', strtotime($dateString));
        return [(int)$year, (int)$month];
    }

    /**
     * Compute contract period date by extracting years from contractPeriod and adding them to date
     */
    private function computeContractPeriodDate($date, $contractPeriod)
    {
        preg_match('/\d+/', $contractPeriod, $matches);
        $contractYears = isset($matches[0]) ? (int)$matches[0] : null;
        return $contractYears ? Carbon::parse($date)->addYears($contractYears) : null;
    }

    /**
     * Compute quartal based on month and year
     */
    private function computeQuartal($year, $month): string
    {
        if ($month >= 1 && $month <= 3) {
            return '1/' . $year;
        } else if ($month >= 4 && $month <= 6) {
            return '2/' . $year;
        } else if ($month >= 7 && $month <= 9) {
            return '3/' . $year;
        }
        return '4/' . $year;
    }

    /**
     * Compute seasonal value for 90days contract type
     */
    private function computeSeasonal($contractType, $year, $month)
    {
        if ($contractType !== '90days') {
            return null;
        }

        if ($month > 5 && $month < 9) {
            return 'summer/' . $year;
        } else if ($month > 11 || $month <= 2) {
            return 'winter/' . ($month > 11 ? $year : $year - 1);
        } else if ($month > 2 && $month <= 5) {
            return 'spring/' . $year;
        } else if ($month > 8 && $month <= 11) {
            return 'autumn/' . $year;
        }

        return null;
    }

    /**
     * Handle file upload and return [path, originalName]
     */
    private function handleFileUpload($file, $directory): array
    {
        $name = $file->store($directory, 'public');
        return [$name, $file->getClientOriginalName()];
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Candidate  $candidate
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $person = Candidate::with(['categories','company', 'position'])->where('id', '=', $id)->first();

        if (isset($person)) {
            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $person,
            ]);
        } else {
            return response()->json([
                'success' => true,
                'status' => 500,
                'data' => [],
            ]);
        }
    }


    public function destroy($id)
    {
        $personDelete = Candidate::findOrFail($id);

        $files = File::where('candidate_id', '=', $id)->get();

        foreach ($files as $file) {
            if (isset($file->filePath)) {
                unlink(storage_path() . '/app/public/' . $file->filePath);
            }

            $file->delete();
        }
        $categoriesForCandidate = Category::where('candidate_id', '=', $id)->get();

        foreach ($categoriesForCandidate as $category) {
            $category->delete();
        }

        if ($personDelete->delete()) {
            return response()->json([
                'success' => true,
                'status' => 200,
                'message' => 'Proof! Your employ has been deleted!',
            ]);
        }
    }
}
