<?php

namespace App\Http\Controllers;

use App\Models\Candidate;
use App\Models\Category;
use App\Models\File;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use ZipArchive;

class FileController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $documentsThatCanBeViewedByCompany = DB::table('files')
            ->join('categories', 'files.category_id', '=', 'categories.id')
            ->select('files.id', 'files.fileName', 'files.category_id', 'categories.nameOfCategory', 'files.company_restriction')
            ->where('files.fileName', 'like', 'ТД%')
            ->orWhere('files.fileName', 'like', 'ТРУДОВ%')
            ->orWhere('files.fileName', 'like', '%passport%')
            ->orWhere(function ($query) {
                $query->whereRaw('LOWER(categories.nameOfCategory) = LOWER(?)', ['ВИЗА']);
            })
            ->get();

        foreach ($documentsThatCanBeViewedByCompany as $document) {
            DB::table('files')
            ->where('id', $document->id)
            ->update(['company_restriction' => 0]);
        }

        return response()->json([
            'success' => true,
            'status' => 200,
            'data' => $documentsThatCanBeViewedByCompany
        ]);
    }

    public function downloadAllFile($id)
    {
        $candidate_id = $id;
        $candidate = Candidate::where('id', $candidate_id)->first();

        $files = File::where('candidate_id', $candidate_id)
            ->where('category_id', '=', 8)
            ->get(["filePath", "fileName"]);

        $zip = new ZipArchive;
        $zipFileName = $candidate->fullName . '_documents.zip';
        $zipFilePath = storage_path('app/' . $zipFileName);

        if ($zip->open($zipFilePath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === true) {
            foreach ($files as $file) {
                $filePath = public_path('storage/' . $file->filePath);
                if (file_exists($filePath)) {
                    $fileName = $file->fileName;
                    $fileExtension = substr(strrchr($filePath, '.'), 1);
                    $fileName .= '.' . $fileExtension;
                    $zip->addFile($filePath, $fileName);
                }
            }
            $zip->close();

            return response()->download($zipFilePath, $zipFileName);
        } else {
            return response()->json(['message' => 'Failed to create the zip file'], 500);
        }
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $file = new File();

        if ($request->hasFile('file')) {
            Storage::disk('public')->put('files', $request->file('file'));
            $name = Storage::disk('public')->put('files', $request->file('file'));
            $file->filePath = $name;
        }

        $file->fileName = $request->fileName;
        $file->candidate_id = $request->candidate_id;
        $file->category_id = $request->category_id;
        $file->company_restriction = $request->company_restriction ?? 1;
        $file->autoGenerated = $request->autoGenerated;
        $file->deleteFile = $request->deleteFile;


        if ($file->save()) {
            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $file
            ]);
        } else {
            return response()->json([
                'success' => false,
                'status' => 500,
                'data' => $file->errors()
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\File  $file
     * @return \Illuminate\Http\Response
     */
    public function downloadFile(File $file)
    {
        $pathToFile = public_path('storage/' . $file->filePath);
        return response()->download($pathToFile);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\File  $file
     * @return \Illuminate\Http\JsonResponse
     */
    public function show($id)
    {
        $userRoleId = Auth::user()->role_id;

        $categoriesQuery = Category::where('candidate_id', $id);

        if ($userRoleId == 1 || $userRoleId == 2) {
            $categoriesQuery->whereNull('candidate_id')->orWhere('candidate_id', $id);
        } elseif ($userRoleId == 3) {
            $categoriesQuery->where('role_id', 3)->orWhere('role_id', 4);
        } elseif ($userRoleId == 4) {
            $categoriesQuery->where('role_id', 4);
        } elseif ($userRoleId == 5) {
            $categoriesQuery->whereIn('role_id', [3, 4, 5]);
        }

        $categories = $categoriesQuery->orderBy('id', 'asc')->get();
        $categoriesIds = $categories->pluck('id');
        $filesQuery = File::where('candidate_id', $id);

        if ($userRoleId == 3 || $userRoleId == 5) {
            $filesQuery->where('company_restriction', 0);
        }

        if($userRoleId == 4) {
            $filesQuery = File::where('candidate_id', $id)
                ->whereIn('category_id', $categoriesIds);
        }

        $files = $filesQuery->get();

        $candidatePassport = ($userRoleId == 1) ? Candidate::where('id', $id)->value('passportPath') : null;

        return response()->json([
            'success' => true,
            'status' => 200,
            'files' => $files,
            'categories' => $categories,
            'candidatePassport' => $candidatePassport,
        ]);
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\File  $file
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, File $file)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\File  $file
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        if (Auth::user()->role_id == 1 || Auth::user()->role_id == 2) {

            $fileDelete = File::findOrFail($id);

            if ($fileDelete->delete()) {
                unlink(storage_path() . '/app/public/' . $fileDelete->filePath);

                return response()->json([
                    'success' => true,
                    'status' => 200,
                    'message' => 'Proof! Your file has been deleted!',
                ]);
            }
        } else {
            return response()->json([
                'success' => true,
                'status' => 401,
                'message' => 'You dont have access',
            ]);
        }
    }
}
