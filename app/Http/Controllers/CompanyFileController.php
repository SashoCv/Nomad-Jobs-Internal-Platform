<?php

namespace App\Http\Controllers;

use App\Models\CompanyCategory;
use App\Traits\HasRolePermissions;
use App\Models\CompanyFile;
use App\Models\Role;
use App\Models\Permission;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class CompanyFileController extends Controller
{
    use HasRolePermissions;
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        if (!$this->checkPermission(Permission::DOCUMENTS_CREATE)) {
            return response()->json(['error' => 'Insufficient permissions'], 403);
        }

        $companyFile = new CompanyFile();

         if (isset($request->autoGenerated)) {
            if ($request->hasFile('companyFile')) {
                Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $name = Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $companyFile->filePath = $name;
            }
            $companyFile->fileName = $request->fileName;
        } else {
            if ($request->hasFile('companyFile')) {
                Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $name = Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $companyFile->filePath = $name;
                $companyFile->fileName = $request->file('companyFile')->getClientOriginalName();
            }
        }
        $companyFile->company_category_id = $request->company_category_id;
        $companyFile->company_id = $request->company_id;



        $companyFile->company_category_id = $request->company_category_id;
        $companyFile->company_id = $request->company_id;


        if ($companyFile->save()) {
            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $companyFile
            ]);
        } else {
            return response()->json([
                'success' => false,
                'status' => 500,
                'data' => $companyFile->errors()
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\CompanyFile  $companyFile
     * @return \Illuminate\Http\JsonResponse
     */
    public function show($id)
    {
        $user = Auth::user();

        if (!$this->checkPermission(Permission::DOCUMENTS_READ)) {
            return response()->json(['error' => 'Insufficient permissions'], 403);
        }

        $companyFiles = CompanyFile::where('company_id', '=', $id)->get();

        if ($this->isStaff()) {
            // Staff can see all categories
            $companyCategories = CompanyCategory::where('company_id', '=', $id)->get();
        } else if ($user->hasRole(Role::COMPANY_USER)) {
            // Company users see only their role-specific categories
            $companyCategories = CompanyCategory::where('company_id', '=', $id)->where('role_id', '=', Role::COMPANY_USER)->get();
        } else {
            // Other roles see all categories (adjust as needed)
            $companyCategories = CompanyCategory::where('company_id', '=', $id)->get();
        }

        return response()->json([
            'success' => true,
            'status' => 200,
            'files' => $companyFiles,
            'CompanyCategories' => $companyCategories,
        ]);
    }

    public function downloadCompanyFile(CompanyFile $file)
    {
        $pathToFile = public_path('storage/' . $file->companyFilePath);
        return response()->download($pathToFile);
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\CompanyFile  $companyFile
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        if (!$this->checkPermission(Permission::DOCUMENTS_DELETE)) {
            return response()->json(['error' => 'Insufficient permissions'], 403);
        }

        $companyFile = CompanyFile::findOrFail($id);
        if ($companyFile->delete()) {
            unlink(storage_path() . '/app/public/' . $companyFile->filePath);

            return response()->json([
                'success' => true,
                'status' => 200,
                'message' => 'Proof! Your file has been deleted!',
            ]);
        }
    }
}
