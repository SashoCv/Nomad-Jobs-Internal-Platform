<?php

namespace App\Http\Controllers;

use App\Models\CompanyCategory;
use App\Models\CompanyFile;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class CompanyFileController extends Controller
{
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $companyFile = new CompanyFile();

        if (isset($request->autoGenerated)) {
            if ($request->hasFile('companyFile')) {
                Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $name = Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $companyFile->filePath = $name;
            }
            $companyFile->fileName = $request->fileName;
        } else {
            if ($request->hasFile('companyFile')) {
                Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $name = Storage::disk('public')->put('companyFiles', $request->file('companyFile'));
                $companyFile->filePath = $name;
                $companyFile->fileName = $request->file('companyFile')->getClientOriginalName();
            }
        }
        $companyFile->company_category_id = $request->company_category_id;
        $companyFile->company_id = $request->company_id;

        if ($companyFile->save()) {
            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $companyFile
            ]);
        } else {
            return response()->json([
                'success' => false,
                'status' => 500,
                'data' => $companyFile->errors()
            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\CompanyFile  $companyFile
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $companyFiles = CompanyFile::where('company_id', '=', $id)->get();

        if (Auth::user()->role_id == 1) {
            $companyCategories = CompanyCategory::where('company_id', '=', $id)->get();
            return response()->json([
                'success' => true,
                'status' => 200,
                'files' => $companyFiles,
                'CompanyCategories' => $companyCategories,
            ]);
        } else if (Auth::user()->role_id == 2) {
            $companyCategories = CompanyCategory::where('company_id', '=', $id)->where('role_id', '=', 2)->orWhere('role_id', '=', 3)->get();
            return response()->json([
                'success' => true,
                'status' => 200,
                'files' => $companyFiles,
                'categories' => $companyCategories
            ]);
        } else if (Auth::user()->role_id == 3) {
            $companyCategories = CompanyCategory::where('company_id', '=', $id)->where('role_id', '=', 3)->get();
            return response()->json([
                'success' => true,
                'status' => 200,
                'files' => $companyFiles,
                'categories' => $companyCategories
            ]);
        }
    }

    public function downloadCompanyFile(CompanyFile $file)
    {
        $pathToFile = public_path('storage/' . $file->companyFilePath);
        return response()->download($pathToFile);
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\CompanyFile  $companyFile
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        if (Auth::user()->role_id == 1 || Auth::user()->role_id == 2) {
            $companyFile = CompanyFile::findOrFail($id);
            if ($companyFile->delete()) {
                unlink(storage_path() . '/app/public/' . $companyFile->filePath);

                return response()->json([
                    'success' => true,
                    'status' => 200,
                    'message' => 'Proof! Your file has been deleted!',
                ]);
            }
        } else {
            return response()->json([
                'success' => true,
                'status' => 401,
                'message' => 'You dont have access',
            ]);
        }
    }
}
